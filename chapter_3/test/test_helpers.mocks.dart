// Mocks generated by Mockito 5.4.3 from annotations
// in chapter_3/test/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:chapter_3/models/availability.dart' as _i2;
import 'package:chapter_3/models/order_item.dart' as _i4;
import 'package:chapter_3/models/product.dart' as _i5;
import 'package:chapter_3/models/product_option.dart' as _i6;
import 'package:chapter_3/services/availability_service.dart' as _i9;
import 'package:chapter_3/services/dialog_service.dart' as _i7;
import 'package:chapter_3/utils/order_builder.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAvailability_0 extends _i1.SmartFake implements _i2.Availability {
  _FakeAvailability_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderBuilder extends _i1.Mock implements _i3.OrderBuilder {
  @override
  List<_i4.OrderItem> get order => (super.noSuchMethod(
        Invocation.getter(#order),
        returnValue: <_i4.OrderItem>[],
        returnValueForMissingStub: <_i4.OrderItem>[],
      ) as List<_i4.OrderItem>);

  @override
  void addToOrder({
    required _i5.Product? product,
    required List<_i6.ProductOption>? selectedOptions,
    int? quantity = 1,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addToOrder,
          [],
          {
            #product: product,
            #selectedOptions: selectedOptions,
            #quantity: quantity,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i7.DialogService {
  @override
  _i8.Future<void> showCustomDialog({
    required String? title,
    required String? subtitle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #title: title,
            #subtitle: subtitle,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [AvailabilityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvailabilityService extends _i1.Mock
    implements _i9.AvailabilityService {
  @override
  _i8.Future<_i2.Availability> checkAvailability(
          {required _i5.Product? product}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAvailability,
          [],
          {#product: product},
        ),
        returnValue: _i8.Future<_i2.Availability>.value(_FakeAvailability_0(
          this,
          Invocation.method(
            #checkAvailability,
            [],
            {#product: product},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Availability>.value(_FakeAvailability_0(
          this,
          Invocation.method(
            #checkAvailability,
            [],
            {#product: product},
          ),
        )),
      ) as _i8.Future<_i2.Availability>);
}
